"""
Woolzy Bot - –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
Telegram –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç–∞–π–º–∏–Ω–≥–æ–º
"""

import asyncio
import logging
import os
import sqlite3
from datetime import datetime, timezone
from typing import List

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.constants import ParseMode
from telegram.ext import (
    AIORateLimiter,
    Application,
    ApplicationBuilder,
    CallbackContext,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
)

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –º–æ–¥—É–ª–µ–π
from config import BOT_TOKEN, DB_PATH, is_admin, GROUP_LINK, GUIDE_LINK, SHOP_LINK
from timings import TIMELINE
from messages import MESSAGES
from buttons import BUTTON_SETS, get_special_buttons
from stats import utcnow_iso, db_connect, build_stats_text, get_users_list, reset_statistics

# ---------------- –ë–ê–ó–ê –î–ê–ù–ù–´–• ----------------
SCHEMA_SQL = """
CREATE TABLE IF NOT EXISTS users (
    user_id     INTEGER PRIMARY KEY,
    username    TEXT,
    first_name  TEXT,
    last_name   TEXT,
    language_code TEXT,
    is_premium  INTEGER DEFAULT 0,
    is_bot      INTEGER DEFAULT 0,
    last_start  TEXT
);

CREATE TABLE IF NOT EXISTS events (
    id          INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id     INTEGER NOT NULL,
    type        TEXT NOT NULL,
    payload     TEXT,
    created_at  TEXT NOT NULL
);
CREATE INDEX IF NOT EXISTS idx_events_user_time ON events(user_id, created_at);
"""

def db_init() -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    with db_connect() as conn:
        conn.executescript(SCHEMA_SQL)

# ---------------- –ë–û–¢ ----------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if not update.effective_user or not update.effective_chat:
        return
    user = update.effective_user
    chat_id = update.effective_chat.id

    with db_connect() as conn:
        # –õ—ë–≥–∫–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        try:
            conn.execute("ALTER TABLE users ADD COLUMN language_code TEXT")
        except Exception:
            pass
        try:
            conn.execute("ALTER TABLE users ADD COLUMN is_premium INTEGER DEFAULT 0")
        except Exception:
            pass
        try:
            conn.execute("ALTER TABLE users ADD COLUMN is_bot INTEGER DEFAULT 0")
        except Exception:
            pass

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        language_code = getattr(user, "language_code", None)
        is_premium = 1 if getattr(user, "is_premium", False) else 0
        is_bot = 1 if getattr(user, "is_bot", False) else 0

        conn.execute(
            """
            INSERT INTO users (user_id, username, first_name, last_name, language_code, is_premium, is_bot, last_start)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ON CONFLICT(user_id) DO UPDATE SET
                username=excluded.username,
                first_name=excluded.first_name,
                last_name=excluded.last_name,
                language_code=excluded.language_code,
                is_premium=excluded.is_premium,
                is_bot=excluded.is_bot,
                last_start=excluded.last_start
            """,
            (
                user.id,
                user.username,
                user.first_name,
                user.last_name,
                language_code,
                is_premium,
                is_bot,
                utcnow_iso(),
            ),
        )
        conn.execute(
            "INSERT INTO events (user_id, type, payload, created_at) VALUES (?, ?, ?, ?)",
            (user.id, "start", None, utcnow_iso()),
        )
        conn.commit()

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ç–∞–π–º–µ—Ä—ã
    for delay, key in TIMELINE:
        context.job_queue.run_once(
            send_timed_message,
            when=delay,
            data={"chat_id": chat_id, "user_id": user.id, "key": key},
            name=f"msg_{user.id}_{key}_{delay}",
        )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ä–∞–∑—É (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–æ–≤)
    if not is_admin(user.id, chat_id):
        await send_timed_message(
            CallbackContext.from_update(update, context),
            data={"chat_id": chat_id, "user_id": user.id, "key": "welcome"},
        )

async def send_timed_message(context: CallbackContext, data: dict | None = None) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ç–∞–π–º–µ—Ä—É"""
    if not data:
        data = context.job.data
    chat_id = data.get("chat_id")
    user_id = data.get("user_id")
    key = data.get("key")
    if not chat_id or not key:
        return

    text = MESSAGES.get(key)
    keyboard = None

    # –ë–∞–∑–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –∏–∑ –Ω–∞–±–æ—Ä–∞
    rows: List[List[InlineKeyboardButton]] = []
    if key in BUTTON_SETS:
        for row in BUTTON_SETS[key]:
            btn_row = [InlineKeyboardButton(text=txt, callback_data=payload) for txt, payload in row]
            rows.append(btn_row)

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    special_buttons = get_special_buttons(key)
    rows.extend(special_buttons)

    # –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–≤–∏–¥–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º)
    if is_admin(user_id, chat_id):
        rows.append([
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="btn_stats"),
        ])

    if rows:
        keyboard = InlineKeyboardMarkup(rows)

    await context.bot.send_message(chat_id=chat_id, text=text, reply_markup=keyboard, parse_mode=ParseMode.HTML)

    if user_id:
        with db_connect() as conn:
            conn.execute(
                "INSERT INTO events (user_id, type, payload, created_at) VALUES (?, ?, ?, ?)",
                (user_id, "message_sent", key, utcnow_iso()),
            )
            conn.commit()

async def on_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    if not update.callback_query or not update.effective_user:
        return

    query = update.callback_query
    user = update.effective_user
    payload = query.data or ""

    with db_connect() as conn:
        # –û–±–Ω–æ–≤–∏–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–ª—É—á–∞–π –∏–∑–º–µ–Ω–µ–Ω–∏–π
        try:
            conn.execute("ALTER TABLE users ADD COLUMN language_code TEXT")
        except Exception:
            pass
        try:
            conn.execute("ALTER TABLE users ADD COLUMN is_premium INTEGER DEFAULT 0")
        except Exception:
            pass
        try:
            conn.execute("ALTER TABLE users ADD COLUMN is_bot INTEGER DEFAULT 0")
        except Exception:
            pass

        language_code = getattr(user, "language_code", None)
        is_premium = 1 if getattr(user, "is_premium", False) else 0
        is_bot = 1 if getattr(user, "is_bot", False) else 0

        conn.execute(
            """
            INSERT INTO users (user_id, username, first_name, last_name, language_code, is_premium, is_bot, last_start)
            VALUES (?, ?, ?, ?, ?, ?, ?, COALESCE((SELECT last_start FROM users WHERE user_id = ?), NULL))
            ON CONFLICT(user_id) DO UPDATE SET
                username=excluded.username,
                first_name=excluded.first_name,
                last_name=excluded.last_name,
                language_code=excluded.language_code,
                is_premium=excluded.is_premium,
                is_bot=excluded.is_bot
            """,
            (
                user.id,
                user.username,
                user.first_name,
                user.last_name,
                language_code,
                is_premium,
                is_bot,
                user.id,
            ),
        )
        conn.execute(
            "INSERT INTO events (user_id, type, payload, created_at) VALUES (?, ?, ?, ?)",
            (user.id, "button_click", payload, utcnow_iso()),
        )
        conn.commit()

    if payload == "btn_group":
        await query.message.reply_text(f"–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç—É—é –≥—Ä—É–ø–ø—É: <a href='{GROUP_LINK}'>–ü–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É</a>", parse_mode=ParseMode.HTML)
    elif payload == "btn_guide":
        await query.message.reply_text(f"–í–æ—Ç —Ç–≤–æ–π PDF-–≥–∞–π–¥: <a href='{GUIDE_LINK}'>–°–∫–∞—á–∞—Ç—å PDF</a>", parse_mode=ParseMode.HTML)
    elif payload == "btn_kaspi":
        await query.message.reply_text(f"–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –≤ Kaspi: <a href='{SHOP_LINK}'>–ü–µ—Ä–µ–π—Ç–∏ –≤ Kaspi</a>", parse_mode=ParseMode.HTML)
    elif payload == "btn_stats" or payload.startswith("stats_"):
        if not is_admin(user.id, update.effective_chat.id if update.effective_chat else None):
            await query.answer("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=False)
            return

        if payload == "btn_stats":
            # –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            kb = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton(text="üìä –ö—Ä–∞—Ç–∫–æ 24h", callback_data="stats_short_24h"),
                    InlineKeyboardButton(text="üìä –ü–æ–¥—Ä–æ–±–Ω–æ 24h", callback_data="stats_full_24h"),
                ],
                [
                    InlineKeyboardButton(text="üìä –ö—Ä–∞—Ç–∫–æ 7d", callback_data="stats_short_7d"),
                    InlineKeyboardButton(text="üìä –ü–æ–¥—Ä–æ–±–Ω–æ 7d", callback_data="stats_full_7d"),
                ],
                [
                    InlineKeyboardButton(text="üìä –ö—Ä–∞—Ç–∫–æ –≤—Å—ë", callback_data="stats_short_all"),
                    InlineKeyboardButton(text="üìä –ü–æ–¥—Ä–æ–±–Ω–æ –≤—Å—ë", callback_data="stats_full_all"),
                ],
                [
                    InlineKeyboardButton(text="üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="stats_users"),
                ],
                [
                    InlineKeyboardButton(text="‚ôªÔ∏è –û–±–Ω—É–ª–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="stats_reset_confirm"),
                ],
            ])
            await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á—ë—Ç:", reply_markup=kb)
            return

        if payload == "stats_users":
            # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            text = get_users_list()
            await query.message.reply_text(text)
            return

        if payload == "stats_reset_confirm":
            # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞
            kb = InlineKeyboardMarkup(
                [[
                    InlineKeyboardButton("–î–∞, –æ–±–Ω—É–ª–∏—Ç—å", callback_data="stats_reset_yes"),
                    InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="stats_reset_no"),
                ]]
            )
            await query.message.reply_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω—É–ª–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?", reply_markup=kb)
            return

        if payload == "stats_reset_yes":
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
            reset_statistics()
            await query.message.reply_text("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω—É–ª–µ–Ω–∞.")
            return

        if payload == "stats_reset_no":
            await query.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", show_alert=False)
            return

        # –§–æ—Ä–º–∞—Ç: stats_{short|full}_{24h|7d|all}
        try:
            _, mode, period = payload.split("_")
        except ValueError:
            await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç", show_alert=False)
            return

        detailed = (mode == "full")
        if period not in ("24h", "7d", "all"):
            await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥", show_alert=False)
            return

        text = build_stats_text(period, detailed)
        await query.message.reply_text(text, parse_mode=ParseMode.HTML)
    else:
        await query.answer("–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª! ‚úÖ")

# ---------------- –ó–ê–ü–£–°–ö ----------------
async def on_startup(app: Application) -> None:
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    db_init()
    logging.info("Database initialized at %s", DB_PATH)

def build_app() -> Application:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    rate_limiter = AIORateLimiter()
    app = (
        ApplicationBuilder()
        .token(BOT_TOKEN)
        .rate_limiter(rate_limiter)
        .concurrent_updates(True)
        .build()
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(on_button))
    app.post_init = on_startup
    return app

def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # Reduce logging verbosity
    logging.basicConfig(
        format="%(asctime)s %(levelname)s: %(message)s",
        level=logging.WARNING,  # Only show warnings and errors
    )
    
    # Suppress verbose library logs
    logging.getLogger("httpx").setLevel(logging.WARNING)
    logging.getLogger("apscheduler").setLevel(logging.WARNING)
    logging.getLogger("telegram").setLevel(logging.WARNING)
    logging.getLogger("telegram.ext").setLevel(logging.WARNING)
    
    # Keep our own logs at INFO level
    logging.getLogger("root").setLevel(logging.INFO)
    
    app = build_app()
    app.run_polling(allowed_updates=["message", "callback_query"])

if __name__ == "__main__":
    main()
