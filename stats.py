"""
–§—É–Ω–∫—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Woolzy Bot
–ó–¥–µ—Å—å –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
"""

import sqlite3
from datetime import datetime, timezone, timedelta
from typing import Any, Dict, List
from config import DB_PATH

# ---------------- –ü–ï–†–ò–û–î–´ –°–¢–ê–¢–ò–°–¢–ò–ö–ò ----------------
STATS_PERIODS: Dict[str, int | None] = {
    "24h": 24 * 3600,
    "7d": 7 * 86400,
    "all": None,
}

# ---------------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ----------------
def utcnow_iso() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO"""
    return datetime.now(timezone.utc).isoformat()

def db_connect() -> sqlite3.Connection:
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(DB_PATH)
    conn.execute("PRAGMA journal_mode=WAL;")
    conn.execute("PRAGMA synchronous=NORMAL;")
    return conn

def period_cutoff_iso(period_key: str) -> str | None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –æ—Ç—Å–µ—á–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO"""
    seconds = STATS_PERIODS.get(period_key)
    if seconds is None:
        return None
    cutoff = datetime.now(timezone.utc) - timedelta(seconds=seconds)
    return cutoff.isoformat()

# ---------------- –§–£–ù–ö–¶–ò–ò –°–¢–ê–¢–ò–°–¢–ò–ö–ò ----------------
def build_stats_text(period_key: str, detailed: bool) -> str:
    """–°—Ç—Ä–æ–∏—Ç —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    cutoff_iso = period_cutoff_iso(period_key)
    where_clause = ""
    params: List[Any] = []
    if cutoff_iso is not None:
        where_clause = " AND created_at >= ?"
        params.append(cutoff_iso)

    with db_connect() as conn:
        cur = conn.cursor()
        cur.execute(f"SELECT COUNT(*) FROM events WHERE type='start'" + where_clause, params)
        total_starts = cur.fetchone()[0] or 0

        cur.execute(
            f"SELECT COUNT(*) FROM events WHERE type='button_click' AND payload='btn_group'" + where_clause,
            params,
        )
        group_clicks = cur.fetchone()[0] or 0

        cur.execute(
            f"SELECT COUNT(*) FROM events WHERE type='button_click' AND payload='btn_kaspi'" + where_clause,
            params,
        )
        kaspi_clicks = cur.fetchone()[0] or 0

        lines: List[str] = []
        header = {
            "24h": "–∑–∞ 24 —á–∞—Å–∞",
            "7d": "–∑–∞ 7 –¥–Ω–µ–π",
            "all": "–∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥",
        }.get(period_key, "–∑–∞ –ø–µ—Ä–∏–æ–¥")
        lines.append(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {header}")
        lines.append(f"‚Äì –°—Ç–∞—Ä—Ç–æ–≤–∞–ª–∏ –±–æ—Ç–∞: <b>{total_starts}</b>")
        lines.append(f"‚Äì –ü–µ—Ä–µ—à–ª–∏ –≤ –≥—Ä—É–ø–ø—É: <b>{group_clicks}</b>")
        lines.append(f"‚Äì –ö–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ Kaspi: <b>{kaspi_clicks}</b>")

        if detailed:
            lines.append("")
            lines.append("–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–¥–æ 50):")

            # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤–º–µ—Å—Ç–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            q = (
                "SELECT e.created_at, e.user_id, e.type, IFNULL(e.payload, ''), "
                "IFNULL(u.first_name,''), IFNULL(u.last_name,''), IFNULL(u.username,''), IFNULL(u.language_code,''), IFNULL(u.is_premium,0), IFNULL(u.is_bot,0) "
                "FROM events e LEFT JOIN users u ON u.user_id = e.user_id"
                + (" WHERE e.created_at >= ?" if cutoff_iso is not None else "")
                + " ORDER BY e.created_at DESC LIMIT 50"
            )
            cur.execute(q, params)
            recent = cur.fetchall()

            def format_time_short(iso_str: str) -> str:
                try:
                    dt = datetime.fromisoformat(iso_str)
                except Exception:
                    return iso_str
                return dt.strftime("%m-%d %H:%M")

            def action_name(ev_type: str, payload: str) -> str:
                if ev_type == "start":
                    return "–°—Ç–∞—Ä—Ç"
                if ev_type == "button_click":
                    mapping = {
                        "btn_group": "–ö–Ω–æ–ø–∫–∞: –ü–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É",
                        "btn_kaspi": "–ö–Ω–æ–ø–∫–∞: –û—Ñ–æ—Ä–º–∏—Ç—å –≤ Kaspi",
                        "btn_guide": "–ö–Ω–æ–ø–∫–∞: –°–Ω–∞—á–∞–ª–∞ –ø–æ—Å–º–æ—Ç—Ä—é –≥–∞–π–¥",
                    }
                    return mapping.get(payload, f"–ö–Ω–æ–ø–∫–∞: {payload}")
                if ev_type == "message_sent":
                    return f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {payload}"
                return ev_type

            for created_at, uid, etype, payload, first_name, last_name, username, lang, is_premium, is_bot in recent:
                display = first_name
                if last_name:
                    display = f"{display} {last_name}" if display else last_name
                if username:
                    at = f"@{username}"
                    display = f"{display} ({at})" if display else at
                if not display:
                    display = str(uid)
                info_bits = []
                if lang:
                    info_bits.append(lang)
                if is_premium:
                    info_bits.append("premium")
                if is_bot:
                    info_bits.append("bot")
                extra = f" ‚Ä¢ {'/'.join(info_bits)}" if info_bits else ""
                lines.append(f"{format_time_short(created_at)} ‚Ä¢ {display}{extra} ‚Ä¢ {action_name(etype, payload)}")

        return "\n".join(lines)

def get_users_list() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–æ 200)"""
    with db_connect() as conn:
        cur = conn.cursor()
        cur.execute(
            """
            SELECT u.user_id, IFNULL(u.first_name,''), IFNULL(u.last_name,''), IFNULL(u.username,''),
                   IFNULL(u.language_code,''), IFNULL(u.is_premium,0), IFNULL(u.is_bot,0),
                   MAX(e.created_at) as last_seen
            FROM users u
            LEFT JOIN events e ON e.user_id = u.user_id
            GROUP BY u.user_id
            ORDER BY last_seen DESC
            LIMIT 200
            """
        )
        rows = cur.fetchall()

    def format_time_short(iso_str: str | None) -> str:
        if not iso_str:
            return "‚Äî"
        try:
            dt = datetime.fromisoformat(iso_str)
            return dt.strftime("%m-%d %H:%M")
        except Exception:
            return iso_str

    lines = ["üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–¥–æ 200):"]
    for uid, first_name, last_name, username, lang, is_premium, is_bot, last_seen in rows:
        display = first_name
        if last_name:
            display = f"{display} {last_name}" if display else last_name
        if username:
            at = f"@{username}"
            display = f"{display} ({at})" if display else at
        if not display:
            display = str(uid)
        info_bits = []
        if lang:
            info_bits.append(lang)
        if is_premium:
            info_bits.append("premium")
        if is_bot:
            info_bits.append("bot")
        extra = f" ‚Ä¢ {'/'.join(info_bits)}" if info_bits else ""
        lines.append(f"{format_time_short(last_seen)} ‚Ä¢ {display}{extra}")

    return "\n".join(lines)

def reset_statistics() -> None:
    """–û–±–Ω—É–ª—è–µ—Ç –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—É–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ–±—ã—Ç–∏—è)"""
    with db_connect() as conn:
        conn.execute("DELETE FROM events")
        conn.commit()
